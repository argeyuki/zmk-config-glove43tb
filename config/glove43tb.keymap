#define ZMK_POINTING_DEFAULT_SCRL_VAL 150

#include <behaviors.dtsi>
#include <behaviors/rgbled_widget.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <6>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

&mmv {
    delay-ms = <20>;
    trigger-period-ms = <5>;
    time-to-max-speed-ms = <100>;
    acceleration-exponent = <2>;
};

&msc {
    delay-ms = <3>;
    trigger-period-ms = <3>;
    time-to-max-speed-ms = <100>;
    acceleration-exponent = <0>;
};

/ {
    input_processors {
        zip_wheel_scaler: zip_wheel_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_WHEEL>;
            track-remainders;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        sensor_rotate_kp: sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        mouse_wheel_scroll: mouse_wheel_scroll {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;
            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt ESC Q         &mt AT W          &kp E         &kp R            &kp T                                                         &mt EQUAL Y  &kp U  &kp I      &mt MINUS O  &mt QUESTION P
&mt TAB A         &kp S             &kp D         &kp F            &kp G        &kp LS(LG(S))               &mt COLON MINUS      &kp H        &kp J  &kp K      &kp L        &lt 6 APOS
&mt LEFT_SHIFT Z  &kp X             &kp C         &kp V            &kp B        &mt AT SEMI                 &mt QMARK RS(SPACE)  &kp N        &kp M  &kp COMMA  &kp DOT      &mt LEFT_SHIFT SLASH
&kp LEFT_COMMAND  &kp LEFT_CONTROL  &kp LEFT_ALT  &lt 1 LG(SPACE)  &lt 2 SPACE  &lt_to_layer_0 5 SPACE      &kp BACKSPACE        &lt 1 ENTER                                 &lt 3 DELETE
            >;

            sensor-bindings = <&mouse_wheel_scroll SCRL_DOWN SCRL_UP>;
        };

        number,arrow {
            bindings = <
&kp ESC           &trans                         &trans                         &trans                           &none                                        &kp KP_EQUAL  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp ASTERISK
&kp TAB           &trans                         &mt RC(UP_ARROW) UP_ARROW      &none                            &kp DQT    &trans             &kp COLON      &kp KP_SLASH  &kp KP_N4  &kp KP_N5  &kp KP_N6  &mt TILDE MINUS
&kp LEFT_SHIFT    &mt RC(LEFT_ARROW) LEFT_ARROW  &mt RC(DOWN_ARROW) DOWN_ARROW  &mt RC(RIGHT_ARROW) RIGHT_ARROW  &none      &trans             &kp DOT        &kp KP_N0     &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp PLUS
&kp LEFT_COMMAND  &kp LEFT_CONTROL               &kp LEFT_ALT                   &none                            &kp SPACE  &kp RG(SPACE)      &kp BACKSPACE  &none                                          &kp TAB
            >;

            sensor-bindings = <&sensor_rotate_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        NUM {
            bindings = <
&kp MINUS       &kp EXCL   &kp AT        &kp HASH  &kp DLLR                                                 &kp CARET             &kp AMPERSAND          &kp TILDE         &kp LEFT_BRACE     &kp RIGHT_BRACE
&kp SLASH       &none      &none         &none     &kp DQT     &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION       &kp AT_SIGN            &kp HASH          &kp DOLLAR         &kp PERCENT
&kp LEFT_SHIFT  &none      &none         &none     &kp PERIOD  &kp EQUAL                    &trans          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH
&kp LEFT_GUI    &kp CARET  &kp LEFT_ALT  &trans    &trans      &trans                       &trans          &trans                                                                            &kp PIPE
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &kp F1     &kp F2                         &kp F3                         &kp F4                           &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F6     &kp F7     &kp F8                         &mt RC(UP_ARROW) UP_ARROW      &kp F9                           &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &kp F10    &kp F11    &mt RC(LEFT_ARROW) LEFT_ARROW  &mt RC(DOWN_ARROW) DOWN_ARROW  &mt RC(RIGHT_ARROW) RIGHT_ARROW  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans      &kp SPACE  &kp ENTER                                                                                                 &none
            >;
        };

        MOUSE {
            bindings = <
&trans          &trans                         &trans                         &trans                           &trans                        &none     &msc MOVE_X(-40)  &msc MOVE_Y(-40)  &msc MOVE_X(40)  &trans
&kp TAB         &trans                         &mt RC(UP_ARROW) UP_ARROW      &none                            &trans  &trans      &mkp MB5  &none     &mkp MB1          &mkp MB3          &mkp MB2         &lt 6 SPACE
&kp LEFT_SHIFT  &mt RC(LEFT_ARROW) LEFT_ARROW  &mt RC(DOWN_ARROW) DOWN_ARROW  &mt RC(RIGHT_ARROW) RIGHT_ARROW  &none   &trans      &mkp MB4  &none     &trans            &msc MOVE_Y(40)   &trans           &trans
&kp LWIN        &kp LEFT_CONTROL               &kp RIGHT_ALT                  &trans                           &trans  &trans      &mkp MB4  &mkp MB5                                                       &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(K_SCROLL_UP) K_SCROLL_DOWN>;
        };

        ARROW {
            bindings = <
&kp ESCAPE         &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME           &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT     &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp RIGHT_COMMAND  &kp LEFT_CONTROL        &kp LEFT_ALT    &trans                   &trans   &trans      &trans  &trans                          &trans
            >;
        };

        SCROLL {
            bindings = <
&kp ESC           &trans            &trans        &trans           &trans                              &trans    &kp RG(R)                      &kp LG(R)                      &trans                           &trans
&kp TAB           &trans            &trans        &trans           &trans       &trans       &none     &trans    &mkp LCLK                      &mt RC(UP_ARROW) UP_ARROW      &mkp RCLK                        &trans
&kp LEFT_SHIFT    &trans            &trans        &trans           &trans       &trans       &none     &trans    &mt RC(LEFT_ARROW) LEFT_ARROW  &mt RC(DOWN_ARROW) DOWN_ARROW  &mt RC(RIGHT_ARROW) RIGHT_ARROW  &trans
&kp LEFT_COMMAND  &kp LEFT_CONTROL  &kp LEFT_ALT  &lt 1 RG(SPACE)  &lt 2 SPACE  &kp TAB      &mkp MB4  &mkp MB5                                                                                                 &none
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans    &trans    &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &ind_con  &ind_bat  &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans    &trans    &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
